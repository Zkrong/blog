{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1535369691478},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1535369691474},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1535369691486},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1535369691481},{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1535369691469},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1535369691608},{"_id":"source/_posts/Flask.md","hash":"9159040c8291cd19291629d72d7cd00744b506e1","modified":1531665630009},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1535369691493},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1535369691503},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1535369691498},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1535369691508},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1535369691516},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1535369691518},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1535369691514},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1535369691511},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1535369691523},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1535369691521},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1535369691525},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1535369691527},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1535369691591},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1535369691594},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1535369691596},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1535369691598},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1535369691601},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1535369691603},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1535369691606},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1535369691612},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1535369691534},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1535369691531},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1535369691536},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1535369691539},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1535369691541},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1535369691544},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1535369691547},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1535369691550},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1535369691553},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1535369691556},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1535369691573},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1535369691577},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1535369691579},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1535369691582},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1535369691584},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1535369691589},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1535369691616},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1535369691655},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1535369691686},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1535369691689},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1535369691691},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1535369691694},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1535369691697},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1535369691699},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1535369691701},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1535369691715},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1535369691720},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1535369691718},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1535369691723},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1535369691559},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1535369691561},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1535369691564},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1535369691566},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1535369691568},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1535369691571},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1535369691621},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1535369691625},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1535369691627},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1535369691630},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1535369691633},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1535369691635},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1535369691638},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1535369691641},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1535369691643},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1535369691646},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1535369691649},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1535369691652},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1535369691660},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1535369691663},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1535369691676},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1535369691705},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1535369691708},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1535369691710},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1535369691711},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1535369691706},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1535369691713},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1535369691673},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1535369691682},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1535369691668},{"_id":"public/archives/index.html","hash":"601b1d576f70712fba15412fd6da45c4aba20456","modified":1535631366271},{"_id":"public/archives/2018/index.html","hash":"3d4bbb1227dd6de9a2dd96209d13c25aec1acb12","modified":1535631366271},{"_id":"public/archives/2018/07/index.html","hash":"12304bb12eaf7e7ac3c946f23047c6c6f4cb49cf","modified":1535631366272},{"_id":"public/2018/07/14/Flask/index.html","hash":"7c205e36c6725002ad539b399e231260b92a9d0d","modified":1535631366272},{"_id":"public/index.html","hash":"79ca3bde341361885f85810aeeb6d4e152c205ea","modified":1535631366272},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1535631366275},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1535631366275},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1535631366275},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1535631366275},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1535631366275},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1535631366275},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1535631366275},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1535631366276},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1535631366276},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1535631366276},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1535631366616},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1535631366620},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1535631366620},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1535631366620},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1535631366621},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1535631366621},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1535631366621},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1535631366621},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1535631366621},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1535631366621},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1535631366621},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1535631366647},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1535631366647}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"### cookies\n\n客户端端的会话技术\ncookie本身由浏览器保存，通过Response将cookie写到浏览器上，下一次访问，浏览器会根据不同的规则携带cookie过来\n\n特点:\n    - 客户端会话技术，浏览器的会话技术\n    - 数据全都是存储在客户端中\n    - 存储使用的键值对结构进行的存储\n    - 特性\n    - 支持过期时间\n        - 默认会自动携带本网站的所有cookie\n           - 根据域名进行cookie存储\n             - 不能跨域名\n             - 不能跨浏览器\n        - Cookie是通过服务器创建的Response来创建的\n\n 设置cookie:\n  \tresponse.set_cookie(key,value[,max_age=None,exprise=None)]\n        max_age: 整数，指定cookie过期时间\n        expries: 整数，指定过期时间，可以指定一个具体日期时间\n        max_age和expries两个选一个指定\n\n 获取cookie:\n  \trequest.cookie.get(key)\n\n 删除cookie\n\tresponse.delete_cookie(key)\n\n### session\n\n~~~html\n服务器端会话技术,依赖于cookie\n特点:\n    - 服务端的会话技术\n    - 所有数据存储在服务器中\n    - 默认存储在内存中\n        - django是默认做了数据持久化（存在了数据库中）\n    - 存储结构也是key-value形势，键值对\n    - session 是离不开cookie的\n\n常用操作:\n\t设置session\n  \t\tsession[‘key’] = ‘value’ \n        \n  \t获取session\n  \t\tsession.get(key,default=None) 根据键获取会话的值\n        \n  \t删除session\n  \t\tpop(key) 删除某一值  \n  \t\tclear()   清除所有\n~~~\n\n### Flask环境搭建\n\n~~~html\n1、在项目中创建一个python package，如App会自动生成一个init文件\n2、将项目中的static和templates文件放到App中\n3、在init文件中创建app\n   如： def create_app():\n        app =Flask(__name__)\n        return app\n4、将项目中的py文件改名为manage.py，并导入app，Manager，将app.run()改为manager\n   如： app = create_app()\n        manager = Manager(app)\n        if __name__ == '__main__':\n            manager.run()\n5、在App中创建views.py,models.py,settings.py,exts.py文件\n6、在views.py中创建蓝图\n  如：  from flask import Blueprint\n    \tblue = Blueprint('blue',__name__)\n（**如果蓝图不想再init中注册则可以直接再创建的蓝图下面自定义一个函数并注册蓝图，\n\t如：def init_blue(app):\n    app.register_blueprint(blue)\n）\n*7、在init.py中注册蓝图\n\t如：app.register_blueprint(blue)\n（**如果蓝图没有再init中注册则直接在这里导入6中注册蓝图的函数。如：init_exts(app)\n8、在settings中进行配置\n如mysql数据库配置：\ndef get_db_uri(dbinfo):\n    db = dbinfo.get('DB')\n    driver = dbinfo.get('DRIVER')\n    user = dbinfo.get('USER')\n    password = dbinfo.get('PASSWORD')\n    host = dbinfo.get('HOST')\n    port = dbinfo.get('PORT')\n    name = dbinfo.get('NAME')\n    return \"{}+{}://{}:{}@{}:{}/{}\".format(db, driver, user, password, host, port, name)\nclass Config:\n    DEBUG = False\n    TESTING = False\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    SECRET_KEY = '110'\n\nclass DevelopConfig(Config):\n    DEBUG = True\n    DATABASE = {\n        'DB': 'mysql',\n        'DRIVER': 'pymysql',\n        'USER': 'root',\n        'PASSWORD': 'rock1204',\n        'HOST': 'localhost',\n        'PORT': '3306',\n        'NAME': 'testflask3',\n    }\n    \nenv = {\n    'develop': DevelopConfig,\n    'test': TestingConfig,\n    'product': ProductConfig,\n}\n9、在init文件中加载setting配置信息\n如：app.config.from_object(env.get('develop'))\n10、在exts导入第三方插件（exts文件用于导入和初始化第三方插件）\n如：在init中的Migrate，models中的Migrate\n    from flask_migrate import Migrate\n    from flask_sqlalchemy import SQLAlchemy\n    #自定义第三方插件\n    db = SQLAlchemy()\n    migrate = Migrate()\n    #初始化第三方插件\n    def init_exts(app):\n        db.init_app(app)\n        migrate.init_app(app=app,db=db)\n11、在init删除已经导入exts中的第三发插件，同时初始化第三方插件\n在init删除已经导入exts中的第三发插件，同时初始化第三方插件\n如：    init_exts(app)\n12、RESTful\n将views改为apis,导入Resource\nfrom flask_restful import Resource\n如:class Hello(Resource):\n    def get(self):\n        return {'msg':'GET请求'}\n    def post(self):\n        return {'msg':'Post请求'} #返回值是json格式的数据\n13、App内新建一个urls用来设置访问路径,需要导入apis内的函数\n如: from App.apis import *\n    from App.exts import api\n    api.add_resource(Hello,'/hello/')(其中Hello为apis函数,/hello/为路径)\n\n\n~~~\n\n### Flask创建数据库\n\n~~~html\n一、创建sql数据库\n1、在models.py中设置db\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n2、在init.py中配置数据库和初始化orm\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///sqlite3.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb.init_app(app=app)\n3、在models中设置table（表格名：__tablename__ = 'People'）\n4、在views.py中设置函数\n如：@blue.route（‘/createdb/’）\ndef create_db():\n\tdb.create_all()  #创建table（db.drop_all(),删除table）\n\treturn 'success'\n5、在浏览器中运行，可以App文件夹中看见又sqlite3.db文件生产\n6、添加数据\n如：p= Person()\np.name = 'xxx' + str(random.randeange(10.100))\np.age = random.randrange(10,100)\ndb.session.add(p)\ndb.session.commit()\nreturn 'success'\n7、获取数据\npersons = Person.query.all()\n8、删除数据\n\tp = Person.query.first()  # 获取第一条数据\n    db.session.delete(p)\n    db.session.commit()\n    \n9、修改数据\n    p = Person.query.first()\n    p.age = 100\n    db.session.commit()\n二、创建mysql数据库\napp.config['SQLALCHEMY_DATABASE_URI'] = dialect+driver://username:password@host:port/database\nDB_URI=‘mysql+pymsql://{}:{}@{}:{}/{}’.format(\n  USERNAME,用户名\n  PASSWORD,密码\n  HOSTNAME,主机\n  PORT,端口\n  DATABASE)数据库名\n三、数据迁移\n安装\n\tpip install flask-migrate\n    \n初始化\n\t使用app和db进行migrate对象初始化\n    \tfrom flask_migrate import Migrate\n\t\tmigrate = Migrate()\n    \tmigrate.init_app(app=app, db=db)\n    \n    安装了flask-script后，可以在manager上添加迁移指令\n    \tfrom flask_migrate import MigrateCommand\n\t\tmanager.add_command('db', MigrateCommand)\n\npython manager.py db init  只调用一次, 这里的db是添加命令时给定的名称\npython manager.py db migrate  生成迁移文件\npython manager.py db upgrade  执行迁移中的升级\npython manager.py db downgrade  执行迁移中的降级\n~~~\n\n### 字段格式化\n\n```html\nfields进行定义\nmarshal_with进行使用\n\t特性\n        显示我们设计的数据结构\n        默认返回的数据如果在预定义结构中不存在，数据会被自动过滤\n        如果返回的数据在预定义的结构中存在，数据会正常返回\n        如果返回的数据比预定义结构中的字段少，预定义的字段会呈现一个默认值\n        \n\t定义字段输出\n        使用字典进行定义\n        常用都是基本类型: String, Integer\n        \n            # 格式化字段\n            user_fields = {\n                'msg': fields.String,\n                'status': fields.Integer,\n                'data': fields.String(attribute='private_data'),\n                'default_data': fields.String(default='1')\n            }\n\n    \t定义好的格式通过装饰器进行使用\n            @marshal_with(需要返回的数据格式),  return返回字典就ok了\n\n                class Users(Resource):\n                    @marshal_with(user_fields)\n                    def get(self):\n                        return {'msg':'呵呵', 'data':'没有数据', 'age':'22', 'private_data':'表中数据'}\n\n\n\t级联数据: 嵌套字典\n\t\tNested\n        \n            # 格式化字段\n            usermodel_fileds = {\n                'id': fields.Integer,\n                'name': fields.String,\n            }\n\n            user2_fields = {\n                'msg': fields.String(default='ok'),\n                'status': fields.Integer(default=1),\n                'data': fields.Nested(usermodel_fileds)\n            }\n        \n\t结构允许嵌套列表\n\t\tfields.List(fields.Nested) \n        \n        \t# 格式化字段\n            usermodel_fileds = {\n                'id': fields.Integer,\n                'name': fields.String,\n            }\n            users3_fields = {\n                'status': fields.String(default=1),\n                'msg': fields.String,\n                'data': fields.List(fields.Nested(usermodel_fileds))\n            }\n```\n\n### URL\n\n~~~html\n连接字段\n    就是将当前数据的操作api暴露出来\n    根据提供的url和唯一标识进行数据操作\n\n# 格式化字段\nusermodel_fileds = {\n    'id': fields.Integer,\n    'name': fields.String,\n    'url': fields.Url('id', absolute=True)\n}\n\n# 在add_resource中提供对应的endpoint\napi.add_resource(Users4, '/user4/', endpoint='id')\n~~~\n\n\n\n\n\n### 参数解析\n\n```html\n可以不通过request.form或request.args获取参数, 而是通过reqparse.RequestParser来解析\n\n    # 参数转换器\n    parser = reqparse.RequestParser()\n    parser.add_argument('name', type=str, action='append')  # 支持多个name\n    parser.add_argument('id', type=int, required=True, help='id是必须的') # 必需参数\n    parser.add_argument('fldt_active', type=str, location='cookies')  # 获取cookies中的数据\n\n    class Users4(Resource):\n        def get(self):\n            parse = parser.parse_args()\n            user_name = parse.get('name')\n            id = parse.get('id')\n            fldt_active = parse.get('fldt_active')\n            return {'name': user_name, 'id': id, 'fldt_active':fldt_active}\n    \n```\n\n### 导入json文件内数据\n\n```html\n1.制定表格执行迁移\n2.从json文件中获取表格内数据(**eval(),json.load()的使用)\n3.导入pymysql将获取的数据导入表格内\n如:goods.py文件\n# 获取商品数据\nimport pymysql\nfrom flask import jsonify\n\ndef get_goods_data():\n\t#先连接数据库\n    db = pymysql.Connect(host='localhost',port=3306,user = 'root',password='rock1204',database='testflask3',charset='utf8')\n\t#设置游标\n    cursor = db.cursor()\n\t#打开文件\n    with open('goods.json','r') as fp:\n        goods = eval(fp.read())\n\t\t#事务开启\n\t\tdb.begin()\n        for good in goods:\n            gid = good.get('gid')\n            name = good.get('name')\n            price = good.get('price')\n            unit = good.get('unit')\n            headImg = good.get('headImg')\n\t\t\t#执行\n            cursor.execute('insert into goods(gid,name,price,unit,headImg) values(\"%d\",\"%s\",\"%d\",\"%s\",\"%s\")'%(gid,name,price,unit,headImg))\n           \n            #提交事务\n            db.commit()\n\t\t#关闭游标\n        cursor.close()\n\t\t#结束事务\n        db.close()\nif __name__ == '__main__':\n    get_goods_data()\n```\n\n```html\n发送邮箱验证:\n1.exts导入Mail,cache\n2.setting中配置邮箱MAIL_SERVER=\"smtp.163.com\",MAIL_USERNAME='zkr744@163.com',MAIL_PASSWORD = '123abc'\n3.给指定邮箱发送邮件\n# 临时存储5分钟, 请在5分钟之内激活\n            cache.set(user.token, user.id, timeout=300)\n# 给指定的邮箱发送邮件\n            msg = Message(subject='淘票票邮箱激活', sender='niejeff@163.com', recipients=[email])\n            # 邮箱内容\n            msg.html = render_template('email_active.html', username=username, active_url='http://127.0.0.1:8002/accountactive/?u_token=%s' % user.token)\n            # 发送\n            mail.send(msg)\n4.激活邮箱\n# 获取当前u_token临时存储userid\n        userid = cache.get(u_token)\n        if userid:\n            user = UserModel.query.get(userid)\n            user.is_active = True  # 激活\n            db.session.commit()\n\n            cache.delete(u_token)  # 删除token\n\n密码加密与解密\n1.导入generate_password_hash()函数\n如:user.passwd = generate_password_hash(password)  # 加密\n密码解密\n1.导入check_password_hash()函数\n如:check_password_hash(user.passwd, password),两个参数,第一个是密文,第二个是输入的密码,判断两个是否相同.\n\n用户权限:abort\n\n\n\n\n\n```\n\n","source":"_posts/Flask.md","raw":"### cookies\n\n客户端端的会话技术\ncookie本身由浏览器保存，通过Response将cookie写到浏览器上，下一次访问，浏览器会根据不同的规则携带cookie过来\n\n特点:\n    - 客户端会话技术，浏览器的会话技术\n    - 数据全都是存储在客户端中\n    - 存储使用的键值对结构进行的存储\n    - 特性\n    - 支持过期时间\n        - 默认会自动携带本网站的所有cookie\n           - 根据域名进行cookie存储\n             - 不能跨域名\n             - 不能跨浏览器\n        - Cookie是通过服务器创建的Response来创建的\n\n 设置cookie:\n  \tresponse.set_cookie(key,value[,max_age=None,exprise=None)]\n        max_age: 整数，指定cookie过期时间\n        expries: 整数，指定过期时间，可以指定一个具体日期时间\n        max_age和expries两个选一个指定\n\n 获取cookie:\n  \trequest.cookie.get(key)\n\n 删除cookie\n\tresponse.delete_cookie(key)\n\n### session\n\n~~~html\n服务器端会话技术,依赖于cookie\n特点:\n    - 服务端的会话技术\n    - 所有数据存储在服务器中\n    - 默认存储在内存中\n        - django是默认做了数据持久化（存在了数据库中）\n    - 存储结构也是key-value形势，键值对\n    - session 是离不开cookie的\n\n常用操作:\n\t设置session\n  \t\tsession[‘key’] = ‘value’ \n        \n  \t获取session\n  \t\tsession.get(key,default=None) 根据键获取会话的值\n        \n  \t删除session\n  \t\tpop(key) 删除某一值  \n  \t\tclear()   清除所有\n~~~\n\n### Flask环境搭建\n\n~~~html\n1、在项目中创建一个python package，如App会自动生成一个init文件\n2、将项目中的static和templates文件放到App中\n3、在init文件中创建app\n   如： def create_app():\n        app =Flask(__name__)\n        return app\n4、将项目中的py文件改名为manage.py，并导入app，Manager，将app.run()改为manager\n   如： app = create_app()\n        manager = Manager(app)\n        if __name__ == '__main__':\n            manager.run()\n5、在App中创建views.py,models.py,settings.py,exts.py文件\n6、在views.py中创建蓝图\n  如：  from flask import Blueprint\n    \tblue = Blueprint('blue',__name__)\n（**如果蓝图不想再init中注册则可以直接再创建的蓝图下面自定义一个函数并注册蓝图，\n\t如：def init_blue(app):\n    app.register_blueprint(blue)\n）\n*7、在init.py中注册蓝图\n\t如：app.register_blueprint(blue)\n（**如果蓝图没有再init中注册则直接在这里导入6中注册蓝图的函数。如：init_exts(app)\n8、在settings中进行配置\n如mysql数据库配置：\ndef get_db_uri(dbinfo):\n    db = dbinfo.get('DB')\n    driver = dbinfo.get('DRIVER')\n    user = dbinfo.get('USER')\n    password = dbinfo.get('PASSWORD')\n    host = dbinfo.get('HOST')\n    port = dbinfo.get('PORT')\n    name = dbinfo.get('NAME')\n    return \"{}+{}://{}:{}@{}:{}/{}\".format(db, driver, user, password, host, port, name)\nclass Config:\n    DEBUG = False\n    TESTING = False\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    SECRET_KEY = '110'\n\nclass DevelopConfig(Config):\n    DEBUG = True\n    DATABASE = {\n        'DB': 'mysql',\n        'DRIVER': 'pymysql',\n        'USER': 'root',\n        'PASSWORD': 'rock1204',\n        'HOST': 'localhost',\n        'PORT': '3306',\n        'NAME': 'testflask3',\n    }\n    \nenv = {\n    'develop': DevelopConfig,\n    'test': TestingConfig,\n    'product': ProductConfig,\n}\n9、在init文件中加载setting配置信息\n如：app.config.from_object(env.get('develop'))\n10、在exts导入第三方插件（exts文件用于导入和初始化第三方插件）\n如：在init中的Migrate，models中的Migrate\n    from flask_migrate import Migrate\n    from flask_sqlalchemy import SQLAlchemy\n    #自定义第三方插件\n    db = SQLAlchemy()\n    migrate = Migrate()\n    #初始化第三方插件\n    def init_exts(app):\n        db.init_app(app)\n        migrate.init_app(app=app,db=db)\n11、在init删除已经导入exts中的第三发插件，同时初始化第三方插件\n在init删除已经导入exts中的第三发插件，同时初始化第三方插件\n如：    init_exts(app)\n12、RESTful\n将views改为apis,导入Resource\nfrom flask_restful import Resource\n如:class Hello(Resource):\n    def get(self):\n        return {'msg':'GET请求'}\n    def post(self):\n        return {'msg':'Post请求'} #返回值是json格式的数据\n13、App内新建一个urls用来设置访问路径,需要导入apis内的函数\n如: from App.apis import *\n    from App.exts import api\n    api.add_resource(Hello,'/hello/')(其中Hello为apis函数,/hello/为路径)\n\n\n~~~\n\n### Flask创建数据库\n\n~~~html\n一、创建sql数据库\n1、在models.py中设置db\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n2、在init.py中配置数据库和初始化orm\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///sqlite3.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb.init_app(app=app)\n3、在models中设置table（表格名：__tablename__ = 'People'）\n4、在views.py中设置函数\n如：@blue.route（‘/createdb/’）\ndef create_db():\n\tdb.create_all()  #创建table（db.drop_all(),删除table）\n\treturn 'success'\n5、在浏览器中运行，可以App文件夹中看见又sqlite3.db文件生产\n6、添加数据\n如：p= Person()\np.name = 'xxx' + str(random.randeange(10.100))\np.age = random.randrange(10,100)\ndb.session.add(p)\ndb.session.commit()\nreturn 'success'\n7、获取数据\npersons = Person.query.all()\n8、删除数据\n\tp = Person.query.first()  # 获取第一条数据\n    db.session.delete(p)\n    db.session.commit()\n    \n9、修改数据\n    p = Person.query.first()\n    p.age = 100\n    db.session.commit()\n二、创建mysql数据库\napp.config['SQLALCHEMY_DATABASE_URI'] = dialect+driver://username:password@host:port/database\nDB_URI=‘mysql+pymsql://{}:{}@{}:{}/{}’.format(\n  USERNAME,用户名\n  PASSWORD,密码\n  HOSTNAME,主机\n  PORT,端口\n  DATABASE)数据库名\n三、数据迁移\n安装\n\tpip install flask-migrate\n    \n初始化\n\t使用app和db进行migrate对象初始化\n    \tfrom flask_migrate import Migrate\n\t\tmigrate = Migrate()\n    \tmigrate.init_app(app=app, db=db)\n    \n    安装了flask-script后，可以在manager上添加迁移指令\n    \tfrom flask_migrate import MigrateCommand\n\t\tmanager.add_command('db', MigrateCommand)\n\npython manager.py db init  只调用一次, 这里的db是添加命令时给定的名称\npython manager.py db migrate  生成迁移文件\npython manager.py db upgrade  执行迁移中的升级\npython manager.py db downgrade  执行迁移中的降级\n~~~\n\n### 字段格式化\n\n```html\nfields进行定义\nmarshal_with进行使用\n\t特性\n        显示我们设计的数据结构\n        默认返回的数据如果在预定义结构中不存在，数据会被自动过滤\n        如果返回的数据在预定义的结构中存在，数据会正常返回\n        如果返回的数据比预定义结构中的字段少，预定义的字段会呈现一个默认值\n        \n\t定义字段输出\n        使用字典进行定义\n        常用都是基本类型: String, Integer\n        \n            # 格式化字段\n            user_fields = {\n                'msg': fields.String,\n                'status': fields.Integer,\n                'data': fields.String(attribute='private_data'),\n                'default_data': fields.String(default='1')\n            }\n\n    \t定义好的格式通过装饰器进行使用\n            @marshal_with(需要返回的数据格式),  return返回字典就ok了\n\n                class Users(Resource):\n                    @marshal_with(user_fields)\n                    def get(self):\n                        return {'msg':'呵呵', 'data':'没有数据', 'age':'22', 'private_data':'表中数据'}\n\n\n\t级联数据: 嵌套字典\n\t\tNested\n        \n            # 格式化字段\n            usermodel_fileds = {\n                'id': fields.Integer,\n                'name': fields.String,\n            }\n\n            user2_fields = {\n                'msg': fields.String(default='ok'),\n                'status': fields.Integer(default=1),\n                'data': fields.Nested(usermodel_fileds)\n            }\n        \n\t结构允许嵌套列表\n\t\tfields.List(fields.Nested) \n        \n        \t# 格式化字段\n            usermodel_fileds = {\n                'id': fields.Integer,\n                'name': fields.String,\n            }\n            users3_fields = {\n                'status': fields.String(default=1),\n                'msg': fields.String,\n                'data': fields.List(fields.Nested(usermodel_fileds))\n            }\n```\n\n### URL\n\n~~~html\n连接字段\n    就是将当前数据的操作api暴露出来\n    根据提供的url和唯一标识进行数据操作\n\n# 格式化字段\nusermodel_fileds = {\n    'id': fields.Integer,\n    'name': fields.String,\n    'url': fields.Url('id', absolute=True)\n}\n\n# 在add_resource中提供对应的endpoint\napi.add_resource(Users4, '/user4/', endpoint='id')\n~~~\n\n\n\n\n\n### 参数解析\n\n```html\n可以不通过request.form或request.args获取参数, 而是通过reqparse.RequestParser来解析\n\n    # 参数转换器\n    parser = reqparse.RequestParser()\n    parser.add_argument('name', type=str, action='append')  # 支持多个name\n    parser.add_argument('id', type=int, required=True, help='id是必须的') # 必需参数\n    parser.add_argument('fldt_active', type=str, location='cookies')  # 获取cookies中的数据\n\n    class Users4(Resource):\n        def get(self):\n            parse = parser.parse_args()\n            user_name = parse.get('name')\n            id = parse.get('id')\n            fldt_active = parse.get('fldt_active')\n            return {'name': user_name, 'id': id, 'fldt_active':fldt_active}\n    \n```\n\n### 导入json文件内数据\n\n```html\n1.制定表格执行迁移\n2.从json文件中获取表格内数据(**eval(),json.load()的使用)\n3.导入pymysql将获取的数据导入表格内\n如:goods.py文件\n# 获取商品数据\nimport pymysql\nfrom flask import jsonify\n\ndef get_goods_data():\n\t#先连接数据库\n    db = pymysql.Connect(host='localhost',port=3306,user = 'root',password='rock1204',database='testflask3',charset='utf8')\n\t#设置游标\n    cursor = db.cursor()\n\t#打开文件\n    with open('goods.json','r') as fp:\n        goods = eval(fp.read())\n\t\t#事务开启\n\t\tdb.begin()\n        for good in goods:\n            gid = good.get('gid')\n            name = good.get('name')\n            price = good.get('price')\n            unit = good.get('unit')\n            headImg = good.get('headImg')\n\t\t\t#执行\n            cursor.execute('insert into goods(gid,name,price,unit,headImg) values(\"%d\",\"%s\",\"%d\",\"%s\",\"%s\")'%(gid,name,price,unit,headImg))\n           \n            #提交事务\n            db.commit()\n\t\t#关闭游标\n        cursor.close()\n\t\t#结束事务\n        db.close()\nif __name__ == '__main__':\n    get_goods_data()\n```\n\n```html\n发送邮箱验证:\n1.exts导入Mail,cache\n2.setting中配置邮箱MAIL_SERVER=\"smtp.163.com\",MAIL_USERNAME='zkr744@163.com',MAIL_PASSWORD = '123abc'\n3.给指定邮箱发送邮件\n# 临时存储5分钟, 请在5分钟之内激活\n            cache.set(user.token, user.id, timeout=300)\n# 给指定的邮箱发送邮件\n            msg = Message(subject='淘票票邮箱激活', sender='niejeff@163.com', recipients=[email])\n            # 邮箱内容\n            msg.html = render_template('email_active.html', username=username, active_url='http://127.0.0.1:8002/accountactive/?u_token=%s' % user.token)\n            # 发送\n            mail.send(msg)\n4.激活邮箱\n# 获取当前u_token临时存储userid\n        userid = cache.get(u_token)\n        if userid:\n            user = UserModel.query.get(userid)\n            user.is_active = True  # 激活\n            db.session.commit()\n\n            cache.delete(u_token)  # 删除token\n\n密码加密与解密\n1.导入generate_password_hash()函数\n如:user.passwd = generate_password_hash(password)  # 加密\n密码解密\n1.导入check_password_hash()函数\n如:check_password_hash(user.passwd, password),两个参数,第一个是密文,第二个是输入的密码,判断两个是否相同.\n\n用户权限:abort\n\n\n\n\n\n```\n\n","slug":"Flask","published":1,"date":"2018-07-14T06:48:30.196Z","updated":"2018-07-15T14:40:30.009Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlgj9led0000roumub16yeuv","content":"<h3 id=\"cookies\"><a href=\"#cookies\" class=\"headerlink\" title=\"cookies\"></a>cookies</h3><p>客户端端的会话技术<br>cookie本身由浏览器保存，通过Response将cookie写到浏览器上，下一次访问，浏览器会根据不同的规则携带cookie过来</p>\n<p>特点:</p>\n<pre><code>- 客户端会话技术，浏览器的会话技术\n- 数据全都是存储在客户端中\n- 存储使用的键值对结构进行的存储\n- 特性\n- 支持过期时间\n    - 默认会自动携带本网站的所有cookie\n       - 根据域名进行cookie存储\n         - 不能跨域名\n         - 不能跨浏览器\n    - Cookie是通过服务器创建的Response来创建的\n</code></pre><p> 设置cookie:<br>      response.set_cookie(key,value[,max_age=None,exprise=None)]<br>        max_age: 整数，指定cookie过期时间<br>        expries: 整数，指定过期时间，可以指定一个具体日期时间<br>        max_age和expries两个选一个指定</p>\n<p> 获取cookie:<br>      request.cookie.get(key)</p>\n<p> 删除cookie<br>    response.delete_cookie(key)</p>\n<h3 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务器端会话技术,依赖于cookie</span><br><span class=\"line\">特点:</span><br><span class=\"line\">    - 服务端的会话技术</span><br><span class=\"line\">    - 所有数据存储在服务器中</span><br><span class=\"line\">    - 默认存储在内存中</span><br><span class=\"line\">        - django是默认做了数据持久化（存在了数据库中）</span><br><span class=\"line\">    - 存储结构也是key-value形势，键值对</span><br><span class=\"line\">    - session 是离不开cookie的</span><br><span class=\"line\"></span><br><span class=\"line\">常用操作:</span><br><span class=\"line\">\t设置session</span><br><span class=\"line\">  \t\tsession[‘key’] = ‘value’ </span><br><span class=\"line\">        </span><br><span class=\"line\">  \t获取session</span><br><span class=\"line\">  \t\tsession.get(key,default=None) 根据键获取会话的值</span><br><span class=\"line\">        </span><br><span class=\"line\">  \t删除session</span><br><span class=\"line\">  \t\tpop(key) 删除某一值  </span><br><span class=\"line\">  \t\tclear()   清除所有</span><br></pre></td></tr></table></figure>\n<h3 id=\"Flask环境搭建\"><a href=\"#Flask环境搭建\" class=\"headerlink\" title=\"Flask环境搭建\"></a>Flask环境搭建</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、在项目中创建一个python package，如App会自动生成一个init文件</span><br><span class=\"line\">2、将项目中的static和templates文件放到App中</span><br><span class=\"line\">3、在init文件中创建app</span><br><span class=\"line\">   如： def create_app():</span><br><span class=\"line\">        app =Flask(__name__)</span><br><span class=\"line\">        return app</span><br><span class=\"line\">4、将项目中的py文件改名为manage.py，并导入app，Manager，将app.run()改为manager</span><br><span class=\"line\">   如： app = create_app()</span><br><span class=\"line\">        manager = Manager(app)</span><br><span class=\"line\">        if __name__ == '__main__':</span><br><span class=\"line\">            manager.run()</span><br><span class=\"line\">5、在App中创建views.py,models.py,settings.py,exts.py文件</span><br><span class=\"line\">6、在views.py中创建蓝图</span><br><span class=\"line\">  如：  from flask import Blueprint</span><br><span class=\"line\">    \tblue = Blueprint('blue',__name__)</span><br><span class=\"line\">（**如果蓝图不想再init中注册则可以直接再创建的蓝图下面自定义一个函数并注册蓝图，</span><br><span class=\"line\">\t如：def init_blue(app):</span><br><span class=\"line\">    app.register_blueprint(blue)</span><br><span class=\"line\">）</span><br><span class=\"line\">*7、在init.py中注册蓝图</span><br><span class=\"line\">\t如：app.register_blueprint(blue)</span><br><span class=\"line\">（**如果蓝图没有再init中注册则直接在这里导入6中注册蓝图的函数。如：init_exts(app)</span><br><span class=\"line\">8、在settings中进行配置</span><br><span class=\"line\">如mysql数据库配置：</span><br><span class=\"line\">def get_db_uri(dbinfo):</span><br><span class=\"line\">    db = dbinfo.get('DB')</span><br><span class=\"line\">    driver = dbinfo.get('DRIVER')</span><br><span class=\"line\">    user = dbinfo.get('USER')</span><br><span class=\"line\">    password = dbinfo.get('PASSWORD')</span><br><span class=\"line\">    host = dbinfo.get('HOST')</span><br><span class=\"line\">    port = dbinfo.get('PORT')</span><br><span class=\"line\">    name = dbinfo.get('NAME')</span><br><span class=\"line\">    return \"&#123;&#125;+&#123;&#125;://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;\".format(db, driver, user, password, host, port, name)</span><br><span class=\"line\">class Config:</span><br><span class=\"line\">    DEBUG = False</span><br><span class=\"line\">    TESTING = False</span><br><span class=\"line\">    SQLALCHEMY_TRACK_MODIFICATIONS = False</span><br><span class=\"line\">    SECRET_KEY = '110'</span><br><span class=\"line\"></span><br><span class=\"line\">class DevelopConfig(Config):</span><br><span class=\"line\">    DEBUG = True</span><br><span class=\"line\">    DATABASE = &#123;</span><br><span class=\"line\">        'DB': 'mysql',</span><br><span class=\"line\">        'DRIVER': 'pymysql',</span><br><span class=\"line\">        'USER': 'root',</span><br><span class=\"line\">        'PASSWORD': 'rock1204',</span><br><span class=\"line\">        'HOST': 'localhost',</span><br><span class=\"line\">        'PORT': '3306',</span><br><span class=\"line\">        'NAME': 'testflask3',</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">env = &#123;</span><br><span class=\"line\">    'develop': DevelopConfig,</span><br><span class=\"line\">    'test': TestingConfig,</span><br><span class=\"line\">    'product': ProductConfig,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">9、在init文件中加载setting配置信息</span><br><span class=\"line\">如：app.config.from_object(env.get('develop'))</span><br><span class=\"line\">10、在exts导入第三方插件（exts文件用于导入和初始化第三方插件）</span><br><span class=\"line\">如：在init中的Migrate，models中的Migrate</span><br><span class=\"line\">    from flask_migrate import Migrate</span><br><span class=\"line\">    from flask_sqlalchemy import SQLAlchemy</span><br><span class=\"line\">    #自定义第三方插件</span><br><span class=\"line\">    db = SQLAlchemy()</span><br><span class=\"line\">    migrate = Migrate()</span><br><span class=\"line\">    #初始化第三方插件</span><br><span class=\"line\">    def init_exts(app):</span><br><span class=\"line\">        db.init_app(app)</span><br><span class=\"line\">        migrate.init_app(app=app,db=db)</span><br><span class=\"line\">11、在init删除已经导入exts中的第三发插件，同时初始化第三方插件</span><br><span class=\"line\">在init删除已经导入exts中的第三发插件，同时初始化第三方插件</span><br><span class=\"line\">如：    init_exts(app)</span><br><span class=\"line\">12、RESTful</span><br><span class=\"line\">将views改为apis,导入Resource</span><br><span class=\"line\">from flask_restful import Resource</span><br><span class=\"line\">如:class Hello(Resource):</span><br><span class=\"line\">    def get(self):</span><br><span class=\"line\">        return &#123;'msg':'GET请求'&#125;</span><br><span class=\"line\">    def post(self):</span><br><span class=\"line\">        return &#123;'msg':'Post请求'&#125; #返回值是json格式的数据</span><br><span class=\"line\">13、App内新建一个urls用来设置访问路径,需要导入apis内的函数</span><br><span class=\"line\">如: from App.apis import *</span><br><span class=\"line\">    from App.exts import api</span><br><span class=\"line\">    api.add_resource(Hello,'/hello/')(其中Hello为apis函数,/hello/为路径)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Flask创建数据库\"><a href=\"#Flask创建数据库\" class=\"headerlink\" title=\"Flask创建数据库\"></a>Flask创建数据库</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一、创建sql数据库</span><br><span class=\"line\">1、在models.py中设置db</span><br><span class=\"line\">from flask_sqlalchemy import SQLAlchemy</span><br><span class=\"line\">db = SQLAlchemy()</span><br><span class=\"line\">2、在init.py中配置数据库和初始化orm</span><br><span class=\"line\">app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///sqlite3.db'</span><br><span class=\"line\">app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False</span><br><span class=\"line\">db.init_app(app=app)</span><br><span class=\"line\">3、在models中设置table（表格名：__tablename__ = 'People'）</span><br><span class=\"line\">4、在views.py中设置函数</span><br><span class=\"line\">如：@blue.route（‘/createdb/’）</span><br><span class=\"line\">def create_db():</span><br><span class=\"line\">\tdb.create_all()  #创建table（db.drop_all(),删除table）</span><br><span class=\"line\">\treturn 'success'</span><br><span class=\"line\">5、在浏览器中运行，可以App文件夹中看见又sqlite3.db文件生产</span><br><span class=\"line\">6、添加数据</span><br><span class=\"line\">如：p= Person()</span><br><span class=\"line\">p.name = 'xxx' + str(random.randeange(10.100))</span><br><span class=\"line\">p.age = random.randrange(10,100)</span><br><span class=\"line\">db.session.add(p)</span><br><span class=\"line\">db.session.commit()</span><br><span class=\"line\">return 'success'</span><br><span class=\"line\">7、获取数据</span><br><span class=\"line\">persons = Person.query.all()</span><br><span class=\"line\">8、删除数据</span><br><span class=\"line\">\tp = Person.query.first()  # 获取第一条数据</span><br><span class=\"line\">    db.session.delete(p)</span><br><span class=\"line\">    db.session.commit()</span><br><span class=\"line\">    </span><br><span class=\"line\">9、修改数据</span><br><span class=\"line\">    p = Person.query.first()</span><br><span class=\"line\">    p.age = 100</span><br><span class=\"line\">    db.session.commit()</span><br><span class=\"line\">二、创建mysql数据库</span><br><span class=\"line\">app.config['SQLALCHEMY_DATABASE_URI'] = dialect+driver://username:password@host:port/database</span><br><span class=\"line\">DB_URI=‘mysql+pymsql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;’.format(</span><br><span class=\"line\">  USERNAME,用户名</span><br><span class=\"line\">  PASSWORD,密码</span><br><span class=\"line\">  HOSTNAME,主机</span><br><span class=\"line\">  PORT,端口</span><br><span class=\"line\">  DATABASE)数据库名</span><br><span class=\"line\">三、数据迁移</span><br><span class=\"line\">安装</span><br><span class=\"line\">\tpip install flask-migrate</span><br><span class=\"line\">    </span><br><span class=\"line\">初始化</span><br><span class=\"line\">\t使用app和db进行migrate对象初始化</span><br><span class=\"line\">    \tfrom flask_migrate import Migrate</span><br><span class=\"line\">\t\tmigrate = Migrate()</span><br><span class=\"line\">    \tmigrate.init_app(app=app, db=db)</span><br><span class=\"line\">    </span><br><span class=\"line\">    安装了flask-script后，可以在manager上添加迁移指令</span><br><span class=\"line\">    \tfrom flask_migrate import MigrateCommand</span><br><span class=\"line\">\t\tmanager.add_command('db', MigrateCommand)</span><br><span class=\"line\"></span><br><span class=\"line\">python manager.py db init  只调用一次, 这里的db是添加命令时给定的名称</span><br><span class=\"line\">python manager.py db migrate  生成迁移文件</span><br><span class=\"line\">python manager.py db upgrade  执行迁移中的升级</span><br><span class=\"line\">python manager.py db downgrade  执行迁移中的降级</span><br></pre></td></tr></table></figure>\n<h3 id=\"字段格式化\"><a href=\"#字段格式化\" class=\"headerlink\" title=\"字段格式化\"></a>字段格式化</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fields进行定义</span><br><span class=\"line\">marshal_with进行使用</span><br><span class=\"line\">\t特性</span><br><span class=\"line\">        显示我们设计的数据结构</span><br><span class=\"line\">        默认返回的数据如果在预定义结构中不存在，数据会被自动过滤</span><br><span class=\"line\">        如果返回的数据在预定义的结构中存在，数据会正常返回</span><br><span class=\"line\">        如果返回的数据比预定义结构中的字段少，预定义的字段会呈现一个默认值</span><br><span class=\"line\">        </span><br><span class=\"line\">\t定义字段输出</span><br><span class=\"line\">        使用字典进行定义</span><br><span class=\"line\">        常用都是基本类型: String, Integer</span><br><span class=\"line\">        </span><br><span class=\"line\">            # 格式化字段</span><br><span class=\"line\">            user_fields = &#123;</span><br><span class=\"line\">                'msg': fields.String,</span><br><span class=\"line\">                'status': fields.Integer,</span><br><span class=\"line\">                'data': fields.String(attribute='private_data'),</span><br><span class=\"line\">                'default_data': fields.String(default='1')</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t定义好的格式通过装饰器进行使用</span><br><span class=\"line\">            @marshal_with(需要返回的数据格式),  return返回字典就ok了</span><br><span class=\"line\"></span><br><span class=\"line\">                class Users(Resource):</span><br><span class=\"line\">                    @marshal_with(user_fields)</span><br><span class=\"line\">                    def get(self):</span><br><span class=\"line\">                        return &#123;'msg':'呵呵', 'data':'没有数据', 'age':'22', 'private_data':'表中数据'&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t级联数据: 嵌套字典</span><br><span class=\"line\">\t\tNested</span><br><span class=\"line\">        </span><br><span class=\"line\">            # 格式化字段</span><br><span class=\"line\">            usermodel_fileds = &#123;</span><br><span class=\"line\">                'id': fields.Integer,</span><br><span class=\"line\">                'name': fields.String,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            user2_fields = &#123;</span><br><span class=\"line\">                'msg': fields.String(default='ok'),</span><br><span class=\"line\">                'status': fields.Integer(default=1),</span><br><span class=\"line\">                'data': fields.Nested(usermodel_fileds)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t结构允许嵌套列表</span><br><span class=\"line\">\t\tfields.List(fields.Nested) </span><br><span class=\"line\">        </span><br><span class=\"line\">        \t# 格式化字段</span><br><span class=\"line\">            usermodel_fileds = &#123;</span><br><span class=\"line\">                'id': fields.Integer,</span><br><span class=\"line\">                'name': fields.String,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            users3_fields = &#123;</span><br><span class=\"line\">                'status': fields.String(default=1),</span><br><span class=\"line\">                'msg': fields.String,</span><br><span class=\"line\">                'data': fields.List(fields.Nested(usermodel_fileds))</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">连接字段</span><br><span class=\"line\">    就是将当前数据的操作api暴露出来</span><br><span class=\"line\">    根据提供的url和唯一标识进行数据操作</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式化字段</span><br><span class=\"line\">usermodel_fileds = &#123;</span><br><span class=\"line\">    'id': fields.Integer,</span><br><span class=\"line\">    'name': fields.String,</span><br><span class=\"line\">    'url': fields.Url('id', absolute=True)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在add_resource中提供对应的endpoint</span><br><span class=\"line\">api.add_resource(Users4, '/user4/', endpoint='id')</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以不通过request.form或request.args获取参数, 而是通过reqparse.RequestParser来解析</span><br><span class=\"line\"></span><br><span class=\"line\">    # 参数转换器</span><br><span class=\"line\">    parser = reqparse.RequestParser()</span><br><span class=\"line\">    parser.add_argument('name', type=str, action='append')  # 支持多个name</span><br><span class=\"line\">    parser.add_argument('id', type=int, required=True, help='id是必须的') # 必需参数</span><br><span class=\"line\">    parser.add_argument('fldt_active', type=str, location='cookies')  # 获取cookies中的数据</span><br><span class=\"line\"></span><br><span class=\"line\">    class Users4(Resource):</span><br><span class=\"line\">        def get(self):</span><br><span class=\"line\">            parse = parser.parse_args()</span><br><span class=\"line\">            user_name = parse.get('name')</span><br><span class=\"line\">            id = parse.get('id')</span><br><span class=\"line\">            fldt_active = parse.get('fldt_active')</span><br><span class=\"line\">            return &#123;'name': user_name, 'id': id, 'fldt_active':fldt_active&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"导入json文件内数据\"><a href=\"#导入json文件内数据\" class=\"headerlink\" title=\"导入json文件内数据\"></a>导入json文件内数据</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.制定表格执行迁移</span><br><span class=\"line\">2.从json文件中获取表格内数据(**eval(),json.load()的使用)</span><br><span class=\"line\">3.导入pymysql将获取的数据导入表格内</span><br><span class=\"line\">如:goods.py文件</span><br><span class=\"line\"># 获取商品数据</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\">from flask import jsonify</span><br><span class=\"line\"></span><br><span class=\"line\">def get_goods_data():</span><br><span class=\"line\">\t#先连接数据库</span><br><span class=\"line\">    db = pymysql.Connect(host='localhost',port=3306,user = 'root',password='rock1204',database='testflask3',charset='utf8')</span><br><span class=\"line\">\t#设置游标</span><br><span class=\"line\">    cursor = db.cursor()</span><br><span class=\"line\">\t#打开文件</span><br><span class=\"line\">    with open('goods.json','r') as fp:</span><br><span class=\"line\">        goods = eval(fp.read())</span><br><span class=\"line\">\t\t#事务开启</span><br><span class=\"line\">\t\tdb.begin()</span><br><span class=\"line\">        for good in goods:</span><br><span class=\"line\">            gid = good.get('gid')</span><br><span class=\"line\">            name = good.get('name')</span><br><span class=\"line\">            price = good.get('price')</span><br><span class=\"line\">            unit = good.get('unit')</span><br><span class=\"line\">            headImg = good.get('headImg')</span><br><span class=\"line\">\t\t\t#执行</span><br><span class=\"line\">            cursor.execute('insert into goods(gid,name,price,unit,headImg) values(\"%d\",\"%s\",\"%d\",\"%s\",\"%s\")'%(gid,name,price,unit,headImg))</span><br><span class=\"line\">           </span><br><span class=\"line\">            #提交事务</span><br><span class=\"line\">            db.commit()</span><br><span class=\"line\">\t\t#关闭游标</span><br><span class=\"line\">        cursor.close()</span><br><span class=\"line\">\t\t#结束事务</span><br><span class=\"line\">        db.close()</span><br><span class=\"line\">if __name__ == '__main__':</span><br><span class=\"line\">    get_goods_data()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发送邮箱验证:</span><br><span class=\"line\">1.exts导入Mail,cache</span><br><span class=\"line\">2.setting中配置邮箱MAIL_SERVER=\"smtp.163.com\",MAIL_USERNAME='zkr744@163.com',MAIL_PASSWORD = '123abc'</span><br><span class=\"line\">3.给指定邮箱发送邮件</span><br><span class=\"line\"># 临时存储5分钟, 请在5分钟之内激活</span><br><span class=\"line\">            cache.set(user.token, user.id, timeout=300)</span><br><span class=\"line\"># 给指定的邮箱发送邮件</span><br><span class=\"line\">            msg = Message(subject='淘票票邮箱激活', sender='niejeff@163.com', recipients=[email])</span><br><span class=\"line\">            # 邮箱内容</span><br><span class=\"line\">            msg.html = render_template('email_active.html', username=username, active_url='http://127.0.0.1:8002/accountactive/?u_token=%s' % user.token)</span><br><span class=\"line\">            # 发送</span><br><span class=\"line\">            mail.send(msg)</span><br><span class=\"line\">4.激活邮箱</span><br><span class=\"line\"># 获取当前u_token临时存储userid</span><br><span class=\"line\">        userid = cache.get(u_token)</span><br><span class=\"line\">        if userid:</span><br><span class=\"line\">            user = UserModel.query.get(userid)</span><br><span class=\"line\">            user.is_active = True  # 激活</span><br><span class=\"line\">            db.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">            cache.delete(u_token)  # 删除token</span><br><span class=\"line\"></span><br><span class=\"line\">密码加密与解密</span><br><span class=\"line\">1.导入generate_password_hash()函数</span><br><span class=\"line\">如:user.passwd = generate_password_hash(password)  # 加密</span><br><span class=\"line\">密码解密</span><br><span class=\"line\">1.导入check_password_hash()函数</span><br><span class=\"line\">如:check_password_hash(user.passwd, password),两个参数,第一个是密文,第二个是输入的密码,判断两个是否相同.</span><br><span class=\"line\"></span><br><span class=\"line\">用户权限:abort</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"cookies\"><a href=\"#cookies\" class=\"headerlink\" title=\"cookies\"></a>cookies</h3><p>客户端端的会话技术<br>cookie本身由浏览器保存，通过Response将cookie写到浏览器上，下一次访问，浏览器会根据不同的规则携带cookie过来</p>\n<p>特点:</p>\n<pre><code>- 客户端会话技术，浏览器的会话技术\n- 数据全都是存储在客户端中\n- 存储使用的键值对结构进行的存储\n- 特性\n- 支持过期时间\n    - 默认会自动携带本网站的所有cookie\n       - 根据域名进行cookie存储\n         - 不能跨域名\n         - 不能跨浏览器\n    - Cookie是通过服务器创建的Response来创建的\n</code></pre><p> 设置cookie:<br>      response.set_cookie(key,value[,max_age=None,exprise=None)]<br>        max_age: 整数，指定cookie过期时间<br>        expries: 整数，指定过期时间，可以指定一个具体日期时间<br>        max_age和expries两个选一个指定</p>\n<p> 获取cookie:<br>      request.cookie.get(key)</p>\n<p> 删除cookie<br>    response.delete_cookie(key)</p>\n<h3 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务器端会话技术,依赖于cookie</span><br><span class=\"line\">特点:</span><br><span class=\"line\">    - 服务端的会话技术</span><br><span class=\"line\">    - 所有数据存储在服务器中</span><br><span class=\"line\">    - 默认存储在内存中</span><br><span class=\"line\">        - django是默认做了数据持久化（存在了数据库中）</span><br><span class=\"line\">    - 存储结构也是key-value形势，键值对</span><br><span class=\"line\">    - session 是离不开cookie的</span><br><span class=\"line\"></span><br><span class=\"line\">常用操作:</span><br><span class=\"line\">\t设置session</span><br><span class=\"line\">  \t\tsession[‘key’] = ‘value’ </span><br><span class=\"line\">        </span><br><span class=\"line\">  \t获取session</span><br><span class=\"line\">  \t\tsession.get(key,default=None) 根据键获取会话的值</span><br><span class=\"line\">        </span><br><span class=\"line\">  \t删除session</span><br><span class=\"line\">  \t\tpop(key) 删除某一值  </span><br><span class=\"line\">  \t\tclear()   清除所有</span><br></pre></td></tr></table></figure>\n<h3 id=\"Flask环境搭建\"><a href=\"#Flask环境搭建\" class=\"headerlink\" title=\"Flask环境搭建\"></a>Flask环境搭建</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、在项目中创建一个python package，如App会自动生成一个init文件</span><br><span class=\"line\">2、将项目中的static和templates文件放到App中</span><br><span class=\"line\">3、在init文件中创建app</span><br><span class=\"line\">   如： def create_app():</span><br><span class=\"line\">        app =Flask(__name__)</span><br><span class=\"line\">        return app</span><br><span class=\"line\">4、将项目中的py文件改名为manage.py，并导入app，Manager，将app.run()改为manager</span><br><span class=\"line\">   如： app = create_app()</span><br><span class=\"line\">        manager = Manager(app)</span><br><span class=\"line\">        if __name__ == '__main__':</span><br><span class=\"line\">            manager.run()</span><br><span class=\"line\">5、在App中创建views.py,models.py,settings.py,exts.py文件</span><br><span class=\"line\">6、在views.py中创建蓝图</span><br><span class=\"line\">  如：  from flask import Blueprint</span><br><span class=\"line\">    \tblue = Blueprint('blue',__name__)</span><br><span class=\"line\">（**如果蓝图不想再init中注册则可以直接再创建的蓝图下面自定义一个函数并注册蓝图，</span><br><span class=\"line\">\t如：def init_blue(app):</span><br><span class=\"line\">    app.register_blueprint(blue)</span><br><span class=\"line\">）</span><br><span class=\"line\">*7、在init.py中注册蓝图</span><br><span class=\"line\">\t如：app.register_blueprint(blue)</span><br><span class=\"line\">（**如果蓝图没有再init中注册则直接在这里导入6中注册蓝图的函数。如：init_exts(app)</span><br><span class=\"line\">8、在settings中进行配置</span><br><span class=\"line\">如mysql数据库配置：</span><br><span class=\"line\">def get_db_uri(dbinfo):</span><br><span class=\"line\">    db = dbinfo.get('DB')</span><br><span class=\"line\">    driver = dbinfo.get('DRIVER')</span><br><span class=\"line\">    user = dbinfo.get('USER')</span><br><span class=\"line\">    password = dbinfo.get('PASSWORD')</span><br><span class=\"line\">    host = dbinfo.get('HOST')</span><br><span class=\"line\">    port = dbinfo.get('PORT')</span><br><span class=\"line\">    name = dbinfo.get('NAME')</span><br><span class=\"line\">    return \"&#123;&#125;+&#123;&#125;://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;\".format(db, driver, user, password, host, port, name)</span><br><span class=\"line\">class Config:</span><br><span class=\"line\">    DEBUG = False</span><br><span class=\"line\">    TESTING = False</span><br><span class=\"line\">    SQLALCHEMY_TRACK_MODIFICATIONS = False</span><br><span class=\"line\">    SECRET_KEY = '110'</span><br><span class=\"line\"></span><br><span class=\"line\">class DevelopConfig(Config):</span><br><span class=\"line\">    DEBUG = True</span><br><span class=\"line\">    DATABASE = &#123;</span><br><span class=\"line\">        'DB': 'mysql',</span><br><span class=\"line\">        'DRIVER': 'pymysql',</span><br><span class=\"line\">        'USER': 'root',</span><br><span class=\"line\">        'PASSWORD': 'rock1204',</span><br><span class=\"line\">        'HOST': 'localhost',</span><br><span class=\"line\">        'PORT': '3306',</span><br><span class=\"line\">        'NAME': 'testflask3',</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">env = &#123;</span><br><span class=\"line\">    'develop': DevelopConfig,</span><br><span class=\"line\">    'test': TestingConfig,</span><br><span class=\"line\">    'product': ProductConfig,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">9、在init文件中加载setting配置信息</span><br><span class=\"line\">如：app.config.from_object(env.get('develop'))</span><br><span class=\"line\">10、在exts导入第三方插件（exts文件用于导入和初始化第三方插件）</span><br><span class=\"line\">如：在init中的Migrate，models中的Migrate</span><br><span class=\"line\">    from flask_migrate import Migrate</span><br><span class=\"line\">    from flask_sqlalchemy import SQLAlchemy</span><br><span class=\"line\">    #自定义第三方插件</span><br><span class=\"line\">    db = SQLAlchemy()</span><br><span class=\"line\">    migrate = Migrate()</span><br><span class=\"line\">    #初始化第三方插件</span><br><span class=\"line\">    def init_exts(app):</span><br><span class=\"line\">        db.init_app(app)</span><br><span class=\"line\">        migrate.init_app(app=app,db=db)</span><br><span class=\"line\">11、在init删除已经导入exts中的第三发插件，同时初始化第三方插件</span><br><span class=\"line\">在init删除已经导入exts中的第三发插件，同时初始化第三方插件</span><br><span class=\"line\">如：    init_exts(app)</span><br><span class=\"line\">12、RESTful</span><br><span class=\"line\">将views改为apis,导入Resource</span><br><span class=\"line\">from flask_restful import Resource</span><br><span class=\"line\">如:class Hello(Resource):</span><br><span class=\"line\">    def get(self):</span><br><span class=\"line\">        return &#123;'msg':'GET请求'&#125;</span><br><span class=\"line\">    def post(self):</span><br><span class=\"line\">        return &#123;'msg':'Post请求'&#125; #返回值是json格式的数据</span><br><span class=\"line\">13、App内新建一个urls用来设置访问路径,需要导入apis内的函数</span><br><span class=\"line\">如: from App.apis import *</span><br><span class=\"line\">    from App.exts import api</span><br><span class=\"line\">    api.add_resource(Hello,'/hello/')(其中Hello为apis函数,/hello/为路径)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Flask创建数据库\"><a href=\"#Flask创建数据库\" class=\"headerlink\" title=\"Flask创建数据库\"></a>Flask创建数据库</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一、创建sql数据库</span><br><span class=\"line\">1、在models.py中设置db</span><br><span class=\"line\">from flask_sqlalchemy import SQLAlchemy</span><br><span class=\"line\">db = SQLAlchemy()</span><br><span class=\"line\">2、在init.py中配置数据库和初始化orm</span><br><span class=\"line\">app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///sqlite3.db'</span><br><span class=\"line\">app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False</span><br><span class=\"line\">db.init_app(app=app)</span><br><span class=\"line\">3、在models中设置table（表格名：__tablename__ = 'People'）</span><br><span class=\"line\">4、在views.py中设置函数</span><br><span class=\"line\">如：@blue.route（‘/createdb/’）</span><br><span class=\"line\">def create_db():</span><br><span class=\"line\">\tdb.create_all()  #创建table（db.drop_all(),删除table）</span><br><span class=\"line\">\treturn 'success'</span><br><span class=\"line\">5、在浏览器中运行，可以App文件夹中看见又sqlite3.db文件生产</span><br><span class=\"line\">6、添加数据</span><br><span class=\"line\">如：p= Person()</span><br><span class=\"line\">p.name = 'xxx' + str(random.randeange(10.100))</span><br><span class=\"line\">p.age = random.randrange(10,100)</span><br><span class=\"line\">db.session.add(p)</span><br><span class=\"line\">db.session.commit()</span><br><span class=\"line\">return 'success'</span><br><span class=\"line\">7、获取数据</span><br><span class=\"line\">persons = Person.query.all()</span><br><span class=\"line\">8、删除数据</span><br><span class=\"line\">\tp = Person.query.first()  # 获取第一条数据</span><br><span class=\"line\">    db.session.delete(p)</span><br><span class=\"line\">    db.session.commit()</span><br><span class=\"line\">    </span><br><span class=\"line\">9、修改数据</span><br><span class=\"line\">    p = Person.query.first()</span><br><span class=\"line\">    p.age = 100</span><br><span class=\"line\">    db.session.commit()</span><br><span class=\"line\">二、创建mysql数据库</span><br><span class=\"line\">app.config['SQLALCHEMY_DATABASE_URI'] = dialect+driver://username:password@host:port/database</span><br><span class=\"line\">DB_URI=‘mysql+pymsql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;’.format(</span><br><span class=\"line\">  USERNAME,用户名</span><br><span class=\"line\">  PASSWORD,密码</span><br><span class=\"line\">  HOSTNAME,主机</span><br><span class=\"line\">  PORT,端口</span><br><span class=\"line\">  DATABASE)数据库名</span><br><span class=\"line\">三、数据迁移</span><br><span class=\"line\">安装</span><br><span class=\"line\">\tpip install flask-migrate</span><br><span class=\"line\">    </span><br><span class=\"line\">初始化</span><br><span class=\"line\">\t使用app和db进行migrate对象初始化</span><br><span class=\"line\">    \tfrom flask_migrate import Migrate</span><br><span class=\"line\">\t\tmigrate = Migrate()</span><br><span class=\"line\">    \tmigrate.init_app(app=app, db=db)</span><br><span class=\"line\">    </span><br><span class=\"line\">    安装了flask-script后，可以在manager上添加迁移指令</span><br><span class=\"line\">    \tfrom flask_migrate import MigrateCommand</span><br><span class=\"line\">\t\tmanager.add_command('db', MigrateCommand)</span><br><span class=\"line\"></span><br><span class=\"line\">python manager.py db init  只调用一次, 这里的db是添加命令时给定的名称</span><br><span class=\"line\">python manager.py db migrate  生成迁移文件</span><br><span class=\"line\">python manager.py db upgrade  执行迁移中的升级</span><br><span class=\"line\">python manager.py db downgrade  执行迁移中的降级</span><br></pre></td></tr></table></figure>\n<h3 id=\"字段格式化\"><a href=\"#字段格式化\" class=\"headerlink\" title=\"字段格式化\"></a>字段格式化</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fields进行定义</span><br><span class=\"line\">marshal_with进行使用</span><br><span class=\"line\">\t特性</span><br><span class=\"line\">        显示我们设计的数据结构</span><br><span class=\"line\">        默认返回的数据如果在预定义结构中不存在，数据会被自动过滤</span><br><span class=\"line\">        如果返回的数据在预定义的结构中存在，数据会正常返回</span><br><span class=\"line\">        如果返回的数据比预定义结构中的字段少，预定义的字段会呈现一个默认值</span><br><span class=\"line\">        </span><br><span class=\"line\">\t定义字段输出</span><br><span class=\"line\">        使用字典进行定义</span><br><span class=\"line\">        常用都是基本类型: String, Integer</span><br><span class=\"line\">        </span><br><span class=\"line\">            # 格式化字段</span><br><span class=\"line\">            user_fields = &#123;</span><br><span class=\"line\">                'msg': fields.String,</span><br><span class=\"line\">                'status': fields.Integer,</span><br><span class=\"line\">                'data': fields.String(attribute='private_data'),</span><br><span class=\"line\">                'default_data': fields.String(default='1')</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t定义好的格式通过装饰器进行使用</span><br><span class=\"line\">            @marshal_with(需要返回的数据格式),  return返回字典就ok了</span><br><span class=\"line\"></span><br><span class=\"line\">                class Users(Resource):</span><br><span class=\"line\">                    @marshal_with(user_fields)</span><br><span class=\"line\">                    def get(self):</span><br><span class=\"line\">                        return &#123;'msg':'呵呵', 'data':'没有数据', 'age':'22', 'private_data':'表中数据'&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t级联数据: 嵌套字典</span><br><span class=\"line\">\t\tNested</span><br><span class=\"line\">        </span><br><span class=\"line\">            # 格式化字段</span><br><span class=\"line\">            usermodel_fileds = &#123;</span><br><span class=\"line\">                'id': fields.Integer,</span><br><span class=\"line\">                'name': fields.String,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            user2_fields = &#123;</span><br><span class=\"line\">                'msg': fields.String(default='ok'),</span><br><span class=\"line\">                'status': fields.Integer(default=1),</span><br><span class=\"line\">                'data': fields.Nested(usermodel_fileds)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t结构允许嵌套列表</span><br><span class=\"line\">\t\tfields.List(fields.Nested) </span><br><span class=\"line\">        </span><br><span class=\"line\">        \t# 格式化字段</span><br><span class=\"line\">            usermodel_fileds = &#123;</span><br><span class=\"line\">                'id': fields.Integer,</span><br><span class=\"line\">                'name': fields.String,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            users3_fields = &#123;</span><br><span class=\"line\">                'status': fields.String(default=1),</span><br><span class=\"line\">                'msg': fields.String,</span><br><span class=\"line\">                'data': fields.List(fields.Nested(usermodel_fileds))</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">连接字段</span><br><span class=\"line\">    就是将当前数据的操作api暴露出来</span><br><span class=\"line\">    根据提供的url和唯一标识进行数据操作</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式化字段</span><br><span class=\"line\">usermodel_fileds = &#123;</span><br><span class=\"line\">    'id': fields.Integer,</span><br><span class=\"line\">    'name': fields.String,</span><br><span class=\"line\">    'url': fields.Url('id', absolute=True)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在add_resource中提供对应的endpoint</span><br><span class=\"line\">api.add_resource(Users4, '/user4/', endpoint='id')</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以不通过request.form或request.args获取参数, 而是通过reqparse.RequestParser来解析</span><br><span class=\"line\"></span><br><span class=\"line\">    # 参数转换器</span><br><span class=\"line\">    parser = reqparse.RequestParser()</span><br><span class=\"line\">    parser.add_argument('name', type=str, action='append')  # 支持多个name</span><br><span class=\"line\">    parser.add_argument('id', type=int, required=True, help='id是必须的') # 必需参数</span><br><span class=\"line\">    parser.add_argument('fldt_active', type=str, location='cookies')  # 获取cookies中的数据</span><br><span class=\"line\"></span><br><span class=\"line\">    class Users4(Resource):</span><br><span class=\"line\">        def get(self):</span><br><span class=\"line\">            parse = parser.parse_args()</span><br><span class=\"line\">            user_name = parse.get('name')</span><br><span class=\"line\">            id = parse.get('id')</span><br><span class=\"line\">            fldt_active = parse.get('fldt_active')</span><br><span class=\"line\">            return &#123;'name': user_name, 'id': id, 'fldt_active':fldt_active&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"导入json文件内数据\"><a href=\"#导入json文件内数据\" class=\"headerlink\" title=\"导入json文件内数据\"></a>导入json文件内数据</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.制定表格执行迁移</span><br><span class=\"line\">2.从json文件中获取表格内数据(**eval(),json.load()的使用)</span><br><span class=\"line\">3.导入pymysql将获取的数据导入表格内</span><br><span class=\"line\">如:goods.py文件</span><br><span class=\"line\"># 获取商品数据</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\">from flask import jsonify</span><br><span class=\"line\"></span><br><span class=\"line\">def get_goods_data():</span><br><span class=\"line\">\t#先连接数据库</span><br><span class=\"line\">    db = pymysql.Connect(host='localhost',port=3306,user = 'root',password='rock1204',database='testflask3',charset='utf8')</span><br><span class=\"line\">\t#设置游标</span><br><span class=\"line\">    cursor = db.cursor()</span><br><span class=\"line\">\t#打开文件</span><br><span class=\"line\">    with open('goods.json','r') as fp:</span><br><span class=\"line\">        goods = eval(fp.read())</span><br><span class=\"line\">\t\t#事务开启</span><br><span class=\"line\">\t\tdb.begin()</span><br><span class=\"line\">        for good in goods:</span><br><span class=\"line\">            gid = good.get('gid')</span><br><span class=\"line\">            name = good.get('name')</span><br><span class=\"line\">            price = good.get('price')</span><br><span class=\"line\">            unit = good.get('unit')</span><br><span class=\"line\">            headImg = good.get('headImg')</span><br><span class=\"line\">\t\t\t#执行</span><br><span class=\"line\">            cursor.execute('insert into goods(gid,name,price,unit,headImg) values(\"%d\",\"%s\",\"%d\",\"%s\",\"%s\")'%(gid,name,price,unit,headImg))</span><br><span class=\"line\">           </span><br><span class=\"line\">            #提交事务</span><br><span class=\"line\">            db.commit()</span><br><span class=\"line\">\t\t#关闭游标</span><br><span class=\"line\">        cursor.close()</span><br><span class=\"line\">\t\t#结束事务</span><br><span class=\"line\">        db.close()</span><br><span class=\"line\">if __name__ == '__main__':</span><br><span class=\"line\">    get_goods_data()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发送邮箱验证:</span><br><span class=\"line\">1.exts导入Mail,cache</span><br><span class=\"line\">2.setting中配置邮箱MAIL_SERVER=\"smtp.163.com\",MAIL_USERNAME='zkr744@163.com',MAIL_PASSWORD = '123abc'</span><br><span class=\"line\">3.给指定邮箱发送邮件</span><br><span class=\"line\"># 临时存储5分钟, 请在5分钟之内激活</span><br><span class=\"line\">            cache.set(user.token, user.id, timeout=300)</span><br><span class=\"line\"># 给指定的邮箱发送邮件</span><br><span class=\"line\">            msg = Message(subject='淘票票邮箱激活', sender='niejeff@163.com', recipients=[email])</span><br><span class=\"line\">            # 邮箱内容</span><br><span class=\"line\">            msg.html = render_template('email_active.html', username=username, active_url='http://127.0.0.1:8002/accountactive/?u_token=%s' % user.token)</span><br><span class=\"line\">            # 发送</span><br><span class=\"line\">            mail.send(msg)</span><br><span class=\"line\">4.激活邮箱</span><br><span class=\"line\"># 获取当前u_token临时存储userid</span><br><span class=\"line\">        userid = cache.get(u_token)</span><br><span class=\"line\">        if userid:</span><br><span class=\"line\">            user = UserModel.query.get(userid)</span><br><span class=\"line\">            user.is_active = True  # 激活</span><br><span class=\"line\">            db.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">            cache.delete(u_token)  # 删除token</span><br><span class=\"line\"></span><br><span class=\"line\">密码加密与解密</span><br><span class=\"line\">1.导入generate_password_hash()函数</span><br><span class=\"line\">如:user.passwd = generate_password_hash(password)  # 加密</span><br><span class=\"line\">密码解密</span><br><span class=\"line\">1.导入check_password_hash()函数</span><br><span class=\"line\">如:check_password_hash(user.passwd, password),两个参数,第一个是密文,第二个是输入的密码,判断两个是否相同.</span><br><span class=\"line\"></span><br><span class=\"line\">用户权限:abort</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}